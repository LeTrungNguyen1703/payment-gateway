generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model notifications {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  type        String    @db.VarChar(50)
  channel     String    @db.VarChar(20)
  recipient   String?   @db.VarChar(255)
  title       String?   @db.VarChar(255)
  body        String?
  data        Json?
  status      String?   @default("pending") @db.VarChar(20)
  sent_at     DateTime? @db.Timestamp(6)
  error       String?
  retry_count Int?      @default(0)
  max_retries Int?      @default(3)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([channel], map: "idx_notifications_channel")
  @@index([created_at(sort: Desc)], map: "idx_notifications_created")
  @@index([status], map: "idx_notifications_status")
  @@index([user_id], map: "idx_notifications_user")
  @@index([type], map: "idx_notifications_type")
}

model payment_methods {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String         @db.Uuid
  type         String         @db.VarChar(50)
  provider     String?        @db.VarChar(50)
  token        String         @unique @db.VarChar(255)
  last_four    String?        @db.VarChar(4)
  expiry_month Int?
  expiry_year  Int?
  is_default   Boolean?       @default(false)
  status       String?        @default("active") @db.VarChar(20)
  metadata     Json?
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  users        users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions transactions[]

  @@index([token], map: "idx_payment_methods_token")
  @@index([user_id], map: "idx_payment_methods_user")
  @@index([status], map: "idx_payment_methods_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model refunds {
  id                       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id           String       @db.Uuid
  amount                   Int
  reason                   String?
  status                   String?      @default("pending") @db.VarChar(20)
  external_refund_id       String?      @db.VarChar(255)
  gateway_response         Json?
  job_id                   String?      @db.VarChar(255)
  processed_by_keycloak_id String?      @db.VarChar(36)
  created_at               DateTime?    @default(now()) @db.Timestamp(6)
  updated_at               DateTime?    @default(now()) @db.Timestamp(6)
  completed_at             DateTime?    @db.Timestamp(6)
  transactions             transactions @relation(fields: [transaction_id], references: [id], onUpdate: NoAction)

  @@index([status], map: "idx_refunds_status")
  @@index([transaction_id], map: "idx_refunds_transaction")
  @@index([created_at(sort: Desc)], map: "idx_refunds_created")
}

model transaction_events {
  id             BigInt       @id @default(autoincrement())
  transaction_id String       @db.Uuid
  event_type     String       @db.VarChar(50)
  from_value     String?      @db.VarChar(50)
  to_value       String?      @db.VarChar(50)
  metadata       Json?
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  transactions   transactions @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_transaction_events_created")
  @@index([transaction_id], map: "idx_transaction_events_txn")
  @@index([event_type], map: "idx_transaction_events_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id                      String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String               @db.Uuid
  payment_method_id       String?              @db.Uuid
  amount                  Int
  currency                String?              @default("VND") @db.VarChar(3)
  description             String?
  status                  String               @db.VarChar(30)
  fraud_score             Int?
  fraud_decision          String?              @db.VarChar(20)
  fraud_provider          String?              @db.VarChar(50)
  fraud_checked_at        DateTime?            @db.Timestamp(6)
  fraud_metadata          Json?
  external_transaction_id Int?
  gateway_provider        String?              @db.VarChar(50)
  gateway_response        Json?
  job_id                  String?              @db.VarChar(255)
  ip_address              String?              @db.Inet
  user_agent              String?
  device_id               String?              @db.VarChar(255)
  created_at              DateTime?            @default(now()) @db.Timestamp(6)
  updated_at              DateTime?            @default(now()) @db.Timestamp(6)
  completed_at            DateTime?            @db.Timestamp(6)
  refunds                 refunds[]
  transaction_events      transaction_events[]
  payment_methods         payment_methods?     @relation(fields: [payment_method_id], references: [id], onUpdate: NoAction)
  users                   users                @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_transactions_created")
  @@index([status], map: "idx_transactions_status")
  @@index([user_id], map: "idx_transactions_user")
}

model users {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keycloak_id       String              @unique @db.VarChar(36)
  email             String              @unique @db.VarChar(255)
  full_name         String?             @db.VarChar(255)
  phone             String?             @db.VarChar(50)
  status            String?             @default("active") @db.VarChar(20)
  kyc_verified      Boolean?            @default(false)
  kyc_level         Int?                @default(0)
  metadata          Json?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  last_login_at     DateTime?           @db.Timestamp(6)
  kyc_verifications kyc_verifications[]
  notifications     notifications[]
  payment_methods   payment_methods[]
  transactions      transactions[]

  @@index([email], map: "idx_users_email")
  @@index([keycloak_id], map: "idx_users_keycloak")
  @@index([status], map: "idx_users_status")
}

model fraud_audit {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id   String    @db.Uuid
  provider         String    @db.VarChar(50)
  request_payload  Json?
  score            Int?
  decision         String?   @db.VarChar(20)
  response_payload Json?
  response_time_ms Int?
  checked_at       DateTime? @default(now()) @db.Timestamp(6)

  @@index([checked_at(sort: Desc)], map: "idx_fraud_audit_checked")
  @@index([provider], map: "idx_fraud_audit_provider")
  @@index([transaction_id], map: "idx_fraud_audit_txn")
}

model jobs {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trigger_run_id String?   @unique @db.VarChar(255)
  type           String    @db.VarChar(50)
  reference_id   String?   @db.Uuid
  status         String?   @default("queued") @db.VarChar(20)
  priority       Int?      @default(0)
  attempts       Int?      @default(0)
  max_attempts   Int?      @default(3)
  result         Json?
  error          String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  started_at     DateTime? @db.Timestamp(6)
  completed_at   DateTime? @db.Timestamp(6)

  @@index([created_at(sort: Desc)], map: "idx_jobs_created")
  @@index([reference_id], map: "idx_jobs_reference")
  @@index([status], map: "idx_jobs_status")
  @@index([trigger_run_id], map: "idx_jobs_trigger_run")
  @@index([type], map: "idx_jobs_type")
}

model kyc_verifications {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String    @db.Uuid
  level                    Int
  status                   String?   @default("pending") @db.VarChar(20)
  provider                 String?   @db.VarChar(50)
  provider_verification_id String?   @db.VarChar(255)
  provider_response        Json?
  documents                Json?
  verified_at              DateTime? @db.Timestamp(6)
  expires_at               DateTime? @db.Timestamp(6)
  rejection_reason         String?
  notes                    String?
  created_at               DateTime? @default(now()) @db.Timestamp(6)
  updated_at               DateTime? @default(now()) @db.Timestamp(6)
  users                    users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([level], map: "idx_kyc_level")
  @@index([status], map: "idx_kyc_status")
  @@index([user_id], map: "idx_kyc_user")
}

model webhooks {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type    String    @db.VarChar(50)
  target_url    String
  payload       Json
  status        String?   @default("pending") @db.VarChar(20)
  http_status   Int?
  response_body String?
  retry_count   Int?      @default(0)
  max_retries   Int?      @default(5)
  next_retry_at DateTime? @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  sent_at       DateTime? @db.Timestamp(6)

  @@index([created_at(sort: Desc)], map: "idx_webhooks_created")
  @@index([event_type], map: "idx_webhooks_event_type")
  @@index([status], map: "idx_webhooks_status")
}
